#!/usr/bin/env python

"""process-bluesky-kmz

Note: This script is avoids importing from the pyairfire package
so that it is easily distributable.
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright (c) 2015 AirFire, PNW, USFS"

import datetime
import filecmp
import logging
import os
import sys
import urllib2
import xmltodict
from argparse import (
    ArgumentParser, RawTextHelpFormatter, Action, ArgumentTypeError
)

EXAMPLES = """
Basic examples:

 $ process-bluesky-kmz --log-level=DEBUG -i /path/to/NAM84/ -o /path/to/data/
"""


class ParseColorMap(Action):
    def __call__(self, parser, namespace, values, option_string=None):
        d = getattr(namespace, self.dest)
        for m in values.split(','):
            try:
                b, a = m.split(':')
                d[b] = a
            except ValueError:
                raise ArgumentTypeError(
                    "Invalid --color-map value '{}'".format(values))

def parse_args():
    parser = ArgumentParser(formatter_class=RawTextHelpFormatter)
    parser.add_argument('-i', '--input-dir', required=True,
        help="e.g. /path/to/NAM/4km/",)
    parser.add_argument('-o', '--output-dir', required=True,
        help="e.g. /path/to/data/dir/")
    parser.add_argument('--input-filename', default='smoke_dispersion.kmz',
        help="name of input file to find; defaults to 'smoke_dispersion.kmz'")
    parser.add_argument('--output-filename', default='egp.kmz',
        help="base name of timestamped output file, and name of sym link; "
        "defaults to 'egp.kmz'")
    # TODO: option to override sym link name, with default to output file base name ?
    parser.add_argument('-l', '--log-level', default="WARN",
        help="Log level - 'DEBUG', 'INFO', 'WARN', 'ERROR'")

    # TODO: add option to skip stripping of legend and logo
    parser.epilog = EXAMPLES
    return parser.parse_args()

def configure_logging(args):
    logging.basicConfig(level=getattr(logging, args.log_level))
    for k, v in args.__dict__.items():
        logging.debug('%s: %s', k, v)

def validate_args(args):

    # TODO: make sure input dir exists
    # TODO: make sure output dir exists
    pass

def find_latest(input_dir, input_filename):
    input_file_pathname = timestamp = None

    # TODO: find latest smoke_information.kmz under output dir;
    # TODO: extract timestamp from path - i.e. run's initialization
    #    time - or back up to file timestamp)

    return input_file_pathname, timestamp

def generate_output_file_pathname(output_dir, output_filename, timestamp):
    # generate timestamped filename
    parts = output_filename.split('.')
    timestamped_file_name = '-'.join([parts[0], timestamp])
    if len(parts) > 1:
        timestamped_file_name = '.'.join([
           timestamped_file_name, '.'.join(parts[1:])])
    return os.path.join(output_dir, timestamped_file_name)

def input(input_file_pathname):
    with open(feed, 'r') as f:
        data = f.read()
    return xmltodict.parse(data)

def process(xml):

    # TODO: process xml

    return xml

def output(output_file_pathname, xml, sym_link_pathname):
    with open(output_file_pathname, 'w') as f:
        f.write(xmltodict.unparse(xml))

    if os.path.exists(sym_link_pathname):
        os.remove(sym_link_pathname)
    os.symlink(output_file_pathname, sym_link_pathname)

def main():
    args  = parse_args()
    configure_logging(args)
    validate_args(args)
    input_file_pathname, timestamp = find_latest(args.input_dir, args.input_filename)

    output_file_pathname = generate_output_file_pathname(args.output_dir,
        args.output_filename, timestamp)
    if not os.path.isfile(output_file_pathname):
        xml = intput(input_file_pathname)
        xml = process(xml)
        output(output_file_pathname,  xml, os.path.join(output_dir,
            output_filename))

if __name__ == "__main__":
    main()

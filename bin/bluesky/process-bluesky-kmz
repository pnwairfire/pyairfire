#!/usr/bin/env python

"""process-bluesky-kmz

Note: This script is avoids importing from the pyairfire package
so that it is easily distributable.

TODO: rename this script
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright (c) 2015 AirFire, PNW, USFS"

import datetime
import fnmatch
#import ftfy
import logging
import os
import re
import shutil
import sys
import tempfile
import xmltodict
import zipfile
from argparse import (
    ArgumentParser, RawTextHelpFormatter, Action, ArgumentTypeError
)

EXAMPLES = """
Basic examples:

 $ process-bluesky-kmz --log-level=DEBUG -i /path/to/NAM84/ -o /path/to/data/
"""


class ParseColorMap(Action):
    def __call__(self, parser, namespace, values, option_string=None):
        d = getattr(namespace, self.dest)
        for m in values.split(','):
            try:
                b, a = m.split(':')
                d[b] = a
            except ValueError:
                raise ArgumentTypeError(
                    "Invalid --color-map value '{}'".format(values))

def parse_args():
    parser = ArgumentParser(formatter_class=RawTextHelpFormatter)
    parser.add_argument('-i', '--input-dir', required=True,
        help="e.g. /path/to/NAM/4km/",)
    parser.add_argument('-o', '--output-dir', required=True,
        help="e.g. /path/to/data/dir/")
    parser.add_argument('--input-filename', default='smoke_dispersion.kmz',
        help="name of input file to find; defaults to 'smoke_dispersion.kmz'")
    parser.add_argument('--output-filename', default='egp.kmz',
        help="base name of timestamped output file, and name of sym link; "
        "defaults to 'egp.kmz'")
    parser.add_argument('--kml-root-name', help="e.g. '%Y%m%d BlueSky Forecast'")
    parser.add_argument('--ignore-existing-output', default=False,
        action="store_true", help="Ignore existing output and regenerate it")
    # TODO: option to override sym link name, with default to output file
    #    base name ?
    parser.add_argument('-l', '--log-level', default="WARN",
        help="Log level - 'DEBUG', 'INFO', 'WARN', 'ERROR'")

    # TODO: add option to skip stripping of legend and logo
    parser.epilog = EXAMPLES
    return parser.parse_args()

def configure_logging(args):
    logging.basicConfig(level=getattr(logging, args.log_level))
    for k, v in args.__dict__.items():
        logging.debug('%s: %s', k, v)

def validate_args(args):
    if not os.path.isdir(args.input_dir):
        logging.error("Input root dir %s does not exist", args.input_dir)
        sys.exit(1)
    if not os.path.isdir(args.output_dir):
        # TODO: should we just create it if it doesn't exist?
        logging.error("Out dir %s does not exist", args.output_dir)
        sys.exit(1)

def determine_timestamp(filename):
    # TODO: extract timestamp from path - i.e. run's initialization
    #    time - if possible
    return datetime.datetime.fromtimestamp(os.path.getmtime(filename))

def find_latest(input_dir, input_filename):
    input_file_pathname = timestamp = None

    for root, dirnames, filenames in os.walk(input_dir):
        for filename in fnmatch.filter(filenames, input_filename):
            pathname = os.path.join(root, filename)
            ts = determine_timestamp(pathname)
            logging.debug("Found %s (last modified %s)", pathname, ts)
            if not input_file_pathname or timestamp < ts:
                input_file_pathname = pathname
                timestamp = ts

    return input_file_pathname, timestamp

FILENAME_TS_FORMAT = "%Y%m%dT%H%M%S"
def generate_output_file_pathname(output_dir, output_filename, timestamp):
    # generate timestamped filename
    parts = output_filename.split('.')
    timestamped_file_name = '-'.join([
        parts[0], timestamp.strftime(FILENAME_TS_FORMAT)])
    if len(parts) > 1:
        timestamped_file_name = '.'.join([
           timestamped_file_name, '.'.join(parts[1:])])
    return os.path.join(output_dir, timestamped_file_name)


## ***** BEGIN Copied from osutils.py *****

## create_working_dir is copied here to avoid need to install
## pyairfire where this script is installed

class create_working_dir(object):
    def __enter__(self):
        self._original_dir = os.getcwd()
        self._working_dir = tempfile.mkdtemp()
        logging.debug('chdir to working directory %s', self._working_dir)
        os.chdir(self._working_dir)
        return self._working_dir

    def __exit__(self, type, value, traceback):
        logging.debug('chdir back to original directory %s', self._original_dir)
        os.chdir(self._original_dir)
        # TODO: delete self._working_dir or just let os clean it up ?

## ***** END Copied from osutils.py *****

DOC_KML_FILENAME = 'doc.kml'
PM25_FOLDER_NAME = 'PM25 from Wildland Fire'
FOLDERS_TO_KEEP = (PM25_FOLDER_NAME)
HOURLY_PM25_FOLDER_NAME = 'Hourly PM25'
PM25_SUB_FOLDERS_TO_KEEP = (
    HOURLY_PM25_FOLDER_NAME,
    'Daily Average PM25'
)
PM25_SUB_FOLDER_TO_SHOW = HOURLY_PM25_FOLDER_NAME
HOURLY_KEY_NAME = 'Hourly Key'
PM25_SCREEN_OVERLAYS_TO_KEEP = (
    HOURLY_KEY_NAME,
    'Daily Average Key'
)
PM25_SCREEN_OVERLAY_TO_SHOW = HOURLY_KEY_NAME

def modify_doc_kml(kml_root_name):
    with open(DOC_KML_FILENAME, 'r') as f:
        xml_str = f.read()

    # encoding as ascii fixes an issue where unicode characters cause
    # the encoding to xml (in xmltodict.unparse) to fail.  The consequence
    # of ignoring unicode is that substring values like
    #   'Unnamed fire in T\xc3miscamingue, Qc, Canada'
    # get changed to
    #   'Unnamed fire in Tmiscamingue, Qc, Canada'
    # (note the deletion of '\xc3', which is an e with an accent over it)
    # TODO: keep encoding as 'utf-8' and somehow tell xmltodict.unparse
    #   to expect 'utf-8'. see:
    #     - http://stackoverflow.com/questions/3224268/python-unicode-encode-error
    #     - http://docs.plone.org/manage/troubleshooting/unicode.html#id1
    #     - http://www.joelonsoftware.com/articles/Unicode.html
    xml_str = xml_str.decode('utf-8')
    #xml_str = ftfy.fix_text(xml_str) #, fix_entities=False, uncurl_quotes=False, fix_latin_ligatures=False)
    xml_str = xml_str.encode('ascii', 'ignore')

    # TODO: fix ordering of dispersion image folders and colorbar overlays
    #   In original, it goes hourly key, hourly pm25, three-hour key,
    #   three-hour pm25, etc.  In the new, stripped down kml, it goes
    #   hourly key, daily avg key, hourly pm25, daily avg pm25

    # TODO: moving everything within 'PM25 from Wildland Fire' Folder up one
    #   and delete the folder

    xml = xmltodict.parse(xml_str)

    if kml_root_name:
        xml['kml']['Document']['name'] = kml_root_name

    xml['kml']['Document']['Folder'] = [
        folder for folder in xml['kml']['Document']['Folder']
        if folder['name'] in FOLDERS_TO_KEEP
    ]
    for folder in xml['kml']['Document']['Folder']:
        logging.debug('processing folder: %s', folder['name'])
        if folder['name'] == PM25_FOLDER_NAME:
            folder['Folder'] = [f for f in folder['Folder']
                if f['name'] in PM25_SUB_FOLDERS_TO_KEEP]
            for f in folder['Folder']:
                visibility = str(int(f['name'] == PM25_SUB_FOLDER_TO_SHOW))
                for go in f['GroundOverlay']:
                    go['visibility'] = visibility
            logging.debug('subfolder kept: %s',
                ', '.join([f['name'] for f in folder['Folder']]))

            folder['ScreenOverlay'] = [o for o in folder['ScreenOverlay']
                if o['name'] in PM25_SCREEN_OVERLAYS_TO_KEEP]
            for o in folder['ScreenOverlay']:
                o['visibility'] = str(int(o['name'] == PM25_SCREEN_OVERLAY_TO_SHOW))

    # TODO: if we want to delete the disclaimer, it's under
    #    'ScreenOverlay' in the PM25 folder

    os.remove(DOC_KML_FILENAME)
    with open(DOC_KML_FILENAME, 'w') as f:
        f.write(xmltodict.unparse(xml))

FILES_TO_KEEP = (
    DOC_KML_FILENAME, 'disclaimer.png', 'fire_event.png', 'fire_location.png'
)
IMAGE_NAME_MATCHER = re.compile('.*(hourly|daily_average).*\.png')

def process(input_file_pathname, output_file_pathname, kml_root_name):
    with create_working_dir() as w_dir:
        logging.debug('created tmp working dir %s', w_dir)

        tmp_output_file_pathname = os.path.join(w_dir,
            os.path.basename(output_file_pathname))
        logging.debug('tmp output file pathname %s', tmp_output_file_pathname)

        zip_file = zipfile.ZipFile(input_file_pathname, 'r')
        new_zip_file = zipfile.ZipFile(tmp_output_file_pathname, 'w')

        for zip_info in zip_file.infolist():
            if (zip_info.orig_filename in FILES_TO_KEEP or
                    IMAGE_NAME_MATCHER.match(zip_info.orig_filename)):
                logging.debug('Including %s', zip_info.orig_filename)
                # TODO: make sure this doesn't affect original
                zip_file.extract(zip_info.orig_filename)
                if zip_info.orig_filename == DOC_KML_FILENAME:
                    modify_doc_kml(kml_root_name)
                new_zip_file.write(zip_info.orig_filename)
            else:
                logging.debug('Excluding %s', zip_info.orig_filename)

        new_zip_file.close()

        shutil.copyfile(tmp_output_file_pathname, output_file_pathname)


def create_sym_link(output_file_pathname, sym_link_pathname):
    if os.path.exists(sym_link_pathname):
        os.remove(sym_link_pathname)
    os.symlink(output_file_pathname, sym_link_pathname)

def main():
    args  = parse_args()
    configure_logging(args)
    validate_args(args)

    input_file_pathname, timestamp = find_latest(args.input_dir,
        args.input_filename)
    if not input_file_pathname:
        logging.warn("Failed to find any input files matching %s under %s.",
            args.input_filename, args.input_dir)
        sys.exit(0) # not really an error, so exit with 0

    output_file_pathname = generate_output_file_pathname(args.output_dir,
        args.output_filename, timestamp)

    if not os.path.isfile(output_file_pathname) or args.ignore_existing_output:
        kml_root_name = args.kml_root_name and timestamp.strftime(args.kml_root_name)
        process(input_file_pathname, output_file_pathname, kml_root_name)
        create_sym_link(output_file_pathname,
            os.path.join(args.output_dir, args.output_filename))
    else:
        logging.info("Latest file, %s, was already processed",
            output_file_pathname)

if __name__ == "__main__":
    main()

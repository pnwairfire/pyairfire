#! /usr/bin/env python

# See `post_options_content`, below, for example calls

import logging
import os
import subprocess

from pyairfire import statuslogging, scripting

DEFAULT_OUT_DIR_BASE_NAME = "run-bluesky"
DEFAULT_INIT_TIME = '2014053100'

# Note: though some argue that all required parameters should be specified as
# positional arguments, I sometimes prefer using 'options' flags, even though
# this means that there are required 'options', which is oxymoronic.

REQUIRED_OPTIONS = [
    {
        'short': '-c',
        'long': '--config',
        'dest': 'config',
        'help': 'base config file'
    }
]

OPTIONAL_OPTIONS = [
    {
        'short': '-b',
        'long': "--bluesky-executable",
        'type': "string",
        'help': "BlueSky executable; default is to just call `bluesky`",
        'default': 'bluesky'
    },
    {
        'short': '-D',
        'long': "--option",
        'type': "string",
        'dest': "config_options",
        'help': "config setting passed on to BlueSky using its -D option; ex '-D META.targets=Dispersion'",
        'action': 'append',
        'default': []
    },
    {
        'short': '-E',
        'long': "--env-var",
        'type': "string",
        'dest': "env_vars",
        'help': "environmental variable passed on to BlueSky using its -E option",
        'action': 'append',
        'default': []
    },
    {
        'short': '-U',
        'long': "--package-version",
        'type': "string",
        'dest': "package_versions",
        'help': "package version passed on to BlueSky using its -U option; ex. '-U HYSPLIT=v7'",
        'action': 'append',
        'default': []
    },
    {
        'short': '-K',
        'long': "--kernel-option",
        'type': "string",
        'dest': "kernel_options",
        'help': "environmental variable passed on to BlueSky using its -K option; ex. '-Kno-cleanup'",
        'action': 'append',
        'default': []
    },
    {
        'short': '-d',
        'long': "--init-time",
        'help': "initilization time",
        'default': DEFAULT_INIT_TIME
    },
    {
        'short': '-f',
        'long': "--fire-data-files-dir",
        'help': "directory containing fire data files",
    },
    {
        'short': '-o',
        'long': "--output-dir-basename",
        'help': "base name of directories to create within output and working dirs; "
            "shortcut for specifing DEFAULT.WORK_DIR and DEFAULT.OUTPUT_DIR explicitly",
        'default': DEFAULT_OUT_DIR_BASE_NAME
    },
    {
        'short': '-v',
        'long': "--bluesky-verbose-mode",
        'help': "Use STARTTLS",
        'action': 'store_true',
        'default': False
    }
]

post_options_content = """
Example calls:

 Running through dispersion:
  > ./run-bluesky -c ~/BlueSky/ini-files/SF2_oe.ini -d 2014090800 \\
      -b ~/code/airfire-bluesky-framework/build/bluesky \\
      -o dispersion -f /home/vagrant/BlueSky/data/fires/2-locations-CA/ \\
      -D "META.targets=\$DISPERSION" \\
      -D DispersionGridOutput.HOURLY_COLORS=RedColorBar,BlueColorBar \\
      -D PolygonsKML.MAKE_POLYGONS_KMZ=True \\
      -D StatusLogging.ENABLED=True \\
      -D HYSPLITDispersion.NPROCESSES=2 \\
      -D HYSPLITDispersion.HYSPLIT_SETUP_FILE=\$HYSPLIT_SETUP_CONFIG \\
      -D REMOVE_LOCATIONS_OUTSIDE_DISPERSION_DOMAIN=true \\
      -D REMOVE_LOCATIONS_BELOW_AREA_THRESHOLD=true \\
      -D LOCATION_AREA_THRESHOLD=5 \\
      -U HYSPLIT=v7 \\
      -Kno-cleanup \\
      -E FOO=bar
      -v

 Running through emissions:
  > ...
"""

def main():
    parser, options, args = scripting.options.parse_options(REQUIRED_OPTIONS,
        OPTIONAL_OPTIONS, post_options_outputter=lambda: post_options_content)

    if options.output_dir_basename:
        options.config_options.append(
            "DEFAULT.WORK_DIR=\${BS_DIR}/working/%s.@/" % (options.output_dir_basename))
        options.config_options.append(
            "DEFAULT.OUTPUT_DIR=\${BS_DIR}/output/%s.@/" % (options.output_dir_basename))
    if options.fire_data_files_dir:
        ts = options.init_time[:8]
        fl = os.path.join(options.fire_data_files_dir, "fire_locations_%s.csv"%(ts))
        fev = os.path.join(options.fire_data_files_dir, "fire_events_%s.csv"%(ts))
        fem = os.path.join(options.fire_data_files_dir, "fire_emissions_%s.csv"%(ts))
        options.config_options.append("InputStandardFiles.LOCATIONS_PATTERN=%s" % (fl))
        options.config_options.append("InputStandardFiles.EVENTS_PATTERN=%s" % (fev))
        options.config_options.append("InputStandardFiles.HOURLY_PATTERN=%s" % (fem))

    cmd_args = [
        options.bluesky_executable,
        '-d ' + options.init_time
    ]
    cmd_args.extend(['-D ' + o for o in options.config_options])
    cmd_args.extend(['-E ' + e for e in options.env_vars])
    cmd_args.extend(['-U ' + u for u in options.package_versions])
    # I'm not sure if a space will break the use of the '-K' option, but I've
    # never seen space put there
    cmd_args.extend(['-K' + k for k in options.kernel_options])
    if options.bluesky_verbose_mode:
        cmd_args.append('-v')
    cmd_args.append(options.config)

    logging.info("About to execute Bluesky:  %s" % (' '.join(cmd_args)))
    proc = subprocess.Popen(cmd_args)
    #proc = subprocess.Popen(["sleep", "5"]) # <-- for testing use of Popen
    try:
        # TODO: if we decide to use stdout=PIPE and/or stderr=PIPE, first see
        # warning on https://docs.python.org/2.7/library/subprocess.html
        proc.wait()
    except KeyboardInterrupt:
        # This script starts bluesky, which itself start's a suprocess.  Given
        # BlueSky exe:
        #   /path/to/bluesky
        # BlueSky starts child process
        #   /path/to/base/lib/bluesky
        # So, calling `proc.kill()` isn't enough. We need to fill both bluesky
        # and it's child process
        subprocess.call(['pkill', '-P%s'%(proc.pid)])

if __name__ == "__main__":
    main()

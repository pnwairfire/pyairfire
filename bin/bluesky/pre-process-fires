#!/usr/bin/env python

"""pre-process-fires: script to combine and filter fires from one or more
BleuSky fire_locations.csv files

Note: This script is self-contained, in that it's not dependent on any modules
in pyairfire. This was done to allow sharing by means of simply passing around
the script file rather than having to install the entire pyairfire package.

TODO: If installing the entire pyairfire package isn't too much of a hurdle,
move FiresMerger into something like pyairfire.bluesky.fires, and write unit
tests (using the example in the usage text for one test case).

See usage string, below, for examples calls
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright (c) 2015 AirFire, PNW, USFS"

import csv
import sys
import traceback
from optparse import OptionValueError, OptionParser

USAGE = """%prog filename[:countrycode[,countrycode]] ...

where country codes, if specified, are used as a whitelist for filtering fires.

Note that the headers in the first input file will show up in the output as is.
Any headers in subsequent files that haven't yet been encountered will be sorted
and appended to the current headers.

Example:

Given fire_locations_1.csv:

id,name,lat,lng,date_time,foo,country
12ho123,Fire A,47.12,-118.34,201405310000Z,foo,USA
dsdho123,Fire B,47.22,-118.3423,201405310000Z,foofoo,USA
sldj2343,Fire C,47.22,-118.3423,201405310000Z,oof,MX

and fire_locations_2.csv:

id,name,lat,lng,date_time,baz,bar,country
12ho123,Fire ZZ,50.12,-112.34,201405310000Z,baz,bar,USA
sldj2343,Fire YY,42.22,-109.3423,201405310000Z,zab,rab,MX
dsdho123,Fire XX,37.22,-112.3423,201405310000Z,bazbaz,barbar,CA

And fire_locations_3.csv:

id,name,lat,lng,date_time,bar,baz,aaa,country
sdfdsf,Fire L,44.22,-116.342,201405310000Z,bary,bazy,aaaaa,CA

Running the following:

 > pre-process-fires fire_locations_1.csv fire_locations_2.csv:CA,USA fire_locations_3.csv

Would produce:

id,name,lat,lng,date_time,foo,country,bar,baz,aaa
12ho123,Fire A,47.12,-118.34,201405310000Z,foo,USA,,,
dsdho123,Fire B,47.22,-118.3423,201405310000Z,foofoo,USA,,,
sldj2343,Fire C,47.22,-118.3423,201405310000Z,oof,MX,,,
12ho123,Fire ZZ,50.12,-112.34,201405310000Z,,USA,bar,baz,
dsdho123,Fire XX,37.22,-112.3423,201405310000Z,,CA,barbar,bazbaz,
sdfdsf,Fire L,44.22,-116.342,201405310000Z,,CA,bary,bazy,aaaaa
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright (c) 2015 AirFire, PNW, USFS"

def error_and_exit(msg):
    print "\n** Error: " + str(msg) + " **\n\nUse '-h' for options and usage\n"
    sys.exit(1)

class FiresMerger(object):

    class FireFile(object):
        def __init__(self, file_specifier):
            a = file_specifier.split(':')
            if len(a) > 2:
                raise RuntimeError("Invalid fire file specifier: %s" % (file_specifier))
            self.file_name = a[0]
            if len(a) == 2:
                if not a[1]:
                    raise RuntimeError("Invalid fire file specifier: %s" % (file_specifier))
                self.country_code_whitelist = set(a[1].split(','))
            else:
                self.country_code_whitelist = None

    def __init__(self, *fire_files):
        self._fire_files = [FiresMerger.FireFile(f) for f in fire_files]
        self._merge()

    def _merge(self):
        self._headers = None
        self._fires = reduce(lambda a,b: a+b,
            [self._process_file(f) for f in self._fire_files])

    def _process_file(self, f):
        rows = []
        with open(f.file_name, 'r') as input_file:
            headers = []
            for row in csv.reader(input_file):
                if not headers:
                    headers = [e.strip(' ') for e in row]
                    if not self._headers:
                        self._headers = headers
                    else:
                        self._headers.extend(sorted(set(headers).difference(self._headers)))
                    headers = dict([(headers[i], i) for i in xrange(len(headers))])
                else:
                    if (not f.country_code_whitelist or
                        row[headers['country']] in f.country_code_whitelist):
                        rows.append({h:row[headers[h]] for h in headers})
        return rows

    def write(self, output_file=None):
        stream = open(output_file, 'w') if output_file else sys.stdout
        csvfile = csv.writer(stream, lineterminator='\n')
        csvfile.writerow(self._headers)
        for f in self._fires:
            csvfile.writerow([f.get(h, '') for h in self._headers])

def main():
    parser = OptionParser(usage=USAGE)
    parser.add_option('-o', '--output-file', #meta=FILE,
        help='output file to contain new set of fires; by default, writes to stdout')
    options, fire_files = parser.parse_args()
    if not fire_files:
        error_and_exit("Specify one or more fire locations csv files")

    try:
        fm = FiresMerger(*fire_files)
        fm.write(options.output_file)
    except Exception, e:
        print traceback.format_exc()
        error_and_exit(e)

if __name__ == "__main__":
    main()

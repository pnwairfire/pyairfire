#!/usr/bin/env python

"""gethmsfires: ...
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright (c) 2015 AirFire, PNW, USFS"

import logging
import sys
import urllib2
import xmltodict
from argparse import ArgumentParser, RawTextHelpFormatter

EXAMPLES = """
Basic examples:

 $ get-hms-kml smoke -o smoke.kml
 $ get-hms-kml fire > fire.kml

Example for a crontab entry that replaces and timestamps
if different than previously cached file, and deletes otherwise

 $ get-hms-kml smoke -o smoke-tmp.kml; if diff smoke-tmp.kml smoke.kml &>/dev/null ; then rm smoke-tmp.kml; else mv smoke-tmp.kml smoke.kml && cp smoke.kml smoke-$(date +"%Y%m%d%H%M").kml; fi

Slight variation that sym-links instead of keeping
copy 'smoke.kml':

 $ get-hms-kml smoke -o smoke-tmp.kml; if diff smoke-tmp.kml smoke.kml &>/dev/null ; then rm smoke-tmp.kml; else DATE=$(date +"%Y%m%d%H%M") ; mv smoke-tmp.kml smoke-$DATE.kml; rm -f smoke.kml; ln -s smoke-$DATE.kml smoke.kml; fi

Same, for fires:
 $ get-hms-kml fire -o fire-tmp.kml; if diff fire-tmp.kml fire.kml &>/dev/null ; then rm fire-tmp.kml; else DATE=$(date +"%Y%m%d%H%M") ; mv fire-tmp.kml fire-$DATE.kml; rm -f fire.kml; ln -s fire-$DATE.kml fire.kml; fi
"""

DEFAUlT_URL_ROOT = "http://www.ssd.noaa.gov/PS/FIRE/hms/"

def read_feed(feed):
    if feed in ('smoke', 'fire'):
        feed = "{}{}.kml".format(DEFAUlT_URL_ROOT, feed)
    logging.debug("Getting {}".format(feed))
    f = urllib2.urlopen(feed)
    data = f.read()
    return xmltodict.parse(data)

class outstream(object):
    def __init__(self, file_name):
        self._file_name = file_name
    def __enter__(self):
        if self._file_name:
            self._file =  open(self._file_name, 'w')
            return self._file
        else:
            return sys.stdout

    def __exit__(self, _type, value, tb):
        if _type is not None:
            pass # Exception occurred

        if self._file_name and self._file:
            self._file.close()
        # else, nothing to do for stdout

def parse_args():
    parser = ArgumentParser(formatter_class=RawTextHelpFormatter)
    parser.add_argument('feed', help="'fires', 'smoke', or kml url")
    parser.add_argument('-o', '--output', default=None,
        help="output file; default to stdout")
    parser.add_argument('-l/', '--log-level', default="WARN",
        help="Log level - 'DEBUG', 'INFO', 'WARN', 'ERROR'")
    # TODO: add option to skip stripping of legend and logo
    parser.epilog = EXAMPLES
    return parser.parse_args()

def strip_extras(args, xml):
    # strip logo and legend
    xml['kml']['Document'].pop('ScreenOverlay', None)
    # strip placemarks out of smoke plumes
    if args.feed.find('smoke') >= 0:
        xml['kml']['Document']['Placemark'] = [
            p for p in xml['kml']['Document']['Placemark'] if p.has_key('Polygon')]

def main():
    args  = parse_args()
    logging.basicConfig(level=getattr(logging, args.log_level))
    xml = read_feed(args.feed)
    strip_extras(args, xml)

    with outstream(args.output) as o:
        o.write(xmltodict.unparse(xml))

if __name__ == "__main__":
    main()

#!/usr/bin/env python

"""gethmsfires: ...
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright (c) 2015 AirFire, PNW, USFS"

import datetime
import filecmp
import logging
import os
import sys
import urllib2
import xmltodict
from argparse import ArgumentParser, RawTextHelpFormatter

EXAMPLES = """
Basic examples:

 $ get-hms-kml smoke -o smoke.kml
 $ get-hms-kml fire > fire.kml

Example with archiving option that replaces and timestamps
if different than previously cached file, and deletes otherwise

 $ get-hms-kml smoke -o smoke-tmp.kml -a
"""

DEFAUlT_URL_ROOT = "http://www.ssd.noaa.gov/PS/FIRE/hms/"

def read_feed(feed):
    if feed in ('smoke', 'fire'):
        feed = "{}{}.kml".format(DEFAUlT_URL_ROOT, feed)
    logging.debug("Getting {}".format(feed))
    f = urllib2.urlopen(feed)
    data = f.read()
    return xmltodict.parse(data)

class outstream(object):
    def __init__(self, file_name):
        self._file_name = file_name
    def __enter__(self):
        if self._file_name:
            self._file =  open(self._file_name, 'w')
            return self._file
        else:
            return sys.stdout

    def __exit__(self, _type, value, tb):
        if _type is not None:
            pass # Exception occurred

        if self._file_name and self._file:
            self._file.close()
        # else, nothing to do for stdout

def parse_args():
    parser = ArgumentParser(formatter_class=RawTextHelpFormatter)
    parser.add_argument('feed', help="'fires', 'smoke', or kml url")
    parser.add_argument('-o', '--output', default=None,
        help="output file; default to stdout")
    parser.add_argument('-l', '--log-level', default="WARN",
        help="Log level - 'DEBUG', 'INFO', 'WARN', 'ERROR'")
    parser.add_argument('-a', '--archive', action="store_true", default=False,
        help="Timestamp and create sym-link; must be used with '-o-'")
    # TODO: add option to skip stripping of legend and logo
    parser.epilog = EXAMPLES
    return parser.parse_args()

def strip_extras(args, xml):
    # strip logo and legend
    xml['kml']['Document'].pop('ScreenOverlay', None)
    # strip placemarks out of smoke plumes
    if args.feed.find('smoke') >= 0:
        xml['kml']['Document']['Placemark'] = [
            p for p in xml['kml']['Document']['Placemark'] if p.has_key('Polygon')]

# From KML:
#  s['@id'] -> s['PolyStyle']['color']
#    'transObsBluePoly'  ->  u'9900ffff'),
#    'transF06RedPoly'  ->  u'990000ff'),
#    'transF12GreenPoly'  ->  [u'ffffffff', u'9900ff00']),
#    'transF18BrownPoly'  ->  u'66ff0bff')]
# It looks like the code is AABBGGRR
POLY_COLOR_MAP = {
    '9900ff00': '33eeeeee', # 99eeeeee', # Green
    '9900ffff': '88888888', # '99888888',  # Yellow
    '990000ff': 'cc222222' # '99222222' # Red
}
def convert_color(color):
    if hasattr(color, 'upper') and color in POLY_COLOR_MAP:
        logging.debug("Converting {} to {}".format(color, POLY_COLOR_MAP[color]))
        return POLY_COLOR_MAP[color]
    return color

def change_colors(args, xml):
    # change color scheme of smoke plumes
    if args.feed.find('smoke') >= 0:
        for s in xml['kml']['Document']['Style']:
            if hasattr(s['PolyStyle']['color'], 'append'):
                for i in xrange(len(s['PolyStyle']['color'])):
                    s['PolyStyle']['color'][i] = convert_color(s['PolyStyle']['color'][i])
            else:
                s['PolyStyle']['color'] = convert_color(s['PolyStyle']['color'])

def output(args, xml):
    output_file_name = args.output
    if args.archive: # args.output will also be specified
        # timestamp it
        parts = args.output.split('.')
        output_file_name = '-'.join([parts[0], datetime.datetime.now().strftime("%Y%m%d%H%M%S")])
        if len(parts) > 1:
            output_file_name = '.'.join([output_file_name, '.'.join(parts[1:])])

    with outstream(output_file_name) as o:
        o.write(xmltodict.unparse(xml))

    if args.archive:
        old_exists = os.path.exists(args.output)
        if old_exists and filecmp.cmp(output_file_name, args.output):
            os.remove(output_file_name)
        else:
            if old_exists:
                os.remove(args.output)
            os.symlink(output_file_name, args.output)

def main():
    args  = parse_args()
    if args.archive and not args.output:
        sys.stderr.write("Error:  '-o' must be specified if '-a' is specified.\n")
        sys.exit(1)

    logging.basicConfig(level=getattr(logging, args.log_level))
    xml = read_feed(args.feed)
    strip_extras(args, xml)
    change_colors(args, xml)
    output(args, xml)

if __name__ == "__main__":
    main()

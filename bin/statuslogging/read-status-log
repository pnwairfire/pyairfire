#!/usr/bin/env python

"""read-status-log: Script to ....

Note: Without using the email [or eventually sms] options, this script doesn't
buy you much more than you can do with curl.  It's mostly for testing the
underlying statuslogging.StatusReader class or for sending notifications.

Example calls:
 > ./bin/statuslogging/read-status-log \
    -e https://status-log.airfire.org/status-logs
 > ./bin/statuslogging/read-status-log \
    -e https://status-log.airfire.org/status-logs \
    -q limit=10 -q offset=20 -q status=Good
 > ./bin/statuslogging/read-status-log \
    -e https://status-log.airfire.org/status-logs \
    -q newer_than=2015-01-01 -q older_than=2015-01-02 -q status=Failure \
    -bar@baz.com -r foo@bar.com --smtp-server localhost:2025



Check out MailCatcher (http://mailcatcher.me/) to test email notications
    gem install mailcatcher

TODO:
 - add option to pass in custom status log html/text formatter
"""

__author__      = "Joel Dubowy"

import datetime
import json
import re
import sys

from afscripting import (
    options as scripting_options,
    utils as scripting_utils
)

try:
    from pyairfire import statuslogging
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../../'))
    sys.path.insert(0, root_dir)
    from pyairfire import statuslogging

# Note: though some argue that all required parameters should be specified as
# positional arguments, I prefer using 'options' flags, even though this
# means that there are required 'options', which is oxymoronic.

REQUIRED_OPTIONS = [
    {
        'short': '-e',
        'long': '--api-endpoint',
        'dest': 'api_endpoint',
        'help': 'status logger query API endpoint (required)'
    }
]

OPTIONAL_OPTIONS = [
    # Query Options
    {
        'short': "-q",
        'long': "--query",
        'type': "string",
        'dest': "query",
        'action': "callback",
        'help': "extra query parameters",
        'default': {},
        'callback': scripting_options.extract_and_set_key_value
    },
    {
        'long': "--number-of-past-days",
        'type': 'int',
        'help': "number of days in past to query logs"

    },
    # Email options
    {
        'short': '-r',
        'long': "--email-recipients",
        'type': "string",
        'dest': "email_recipients",
        'help': "email addresses to send queried logs to; specicy emails separately or comma-separated",
        'action': 'callback',
        'default': [],
        'callback': scripting_options.append_or_split_and_extend
    },
    {
        'long': "--email-sender",
        'dest': "email_sender",
        'help': "from email address for queried log email"
    },
    {
        'long': "--email-subject",
        'dest': "email_subject",
        'help': "subject of email"
    },
    {
        'long': "--smtp-server",
        'dest': "smtp_server",
        'help': "SMTP server host and port (ex. 'smtp.google.com:587')"
    },
    {
        'long': "--smtp-username",
        'dest': "smtp_username",
        'help': "Username to log into SMTP server"
    },
    {
        'long': "--smtp-password",
        'dest': "smtp_password",
        'help': "Password to log into SMTP server"
    },
    {
        'long': "--smtp-starttls",
        'dest': "smtp_starttls",
        'help': "Use STARTTLS",
        'action': 'store_true',
        'default': False
    },
    # # SMS options  <-- not supported
    # {
    #     'long': "--sms-recipients",
    #     'dest': "sms_recipients",
    #     'help': "phone numbers to to send queried log SMS to",
    #     'action': 'append',
    #     'default': []
    # },
    # {
    #     'long': "--sms-sender",
    #     'dest': "sms_sender",
    #     'help': "from phone number for queried log SMS"
    # },
    # General Options
    {
        'long': "--quiet",
        'dest': "quiet",
        'help': "suppress ouput of queried logs",
        'action': 'store_true',
        'default': False
    }
]

def main():
    post_options_content = """
Possible Query Parameters (not an exaustive list):
  - limit -- ex. limit=10
  - offset -- ex. offset=30
  - newer_than -- newer_than=2015-01-14
  - older_than -- older_than=2015-01-14T18:23:23Z
  - most_recent_by_group -- most_recent_by_group=domain
  - status -- ex. status=Good
  - step -- ex. step=Fill Data
  - action -- ex. action=Start
  - machine -- ex. machine=Smokey

"""
    parser, options, args = scripting_options.parse_options(REQUIRED_OPTIONS,
        OPTIONAL_OPTIONS, post_options_outputter=lambda: post_options_content)

    try:
        query = dict(options.query)
        if options.number_of_past_days:
            if 'newer_than' in query or 'older_than' in query:
                msg = ("Don't specify query fields 'newer_than' or 'older_than' along"
                    " with option --number-of-past-days")
                scripting_utils.exit_with_msg(msg)
            newer_than = datetime.datetime.now()-datetime.timedelta(
                days=options.number_of_past_days)
            query.update(newer_than=newer_than.strftime("%Y-%m-%dT%H:%M:%S"))
        notifier_options = options.__dict__
        api_endpoint = notifier_options.pop('api_endpoint')
        email_subject = notifier_options.pop('email_subject', None)
        sn = statuslogging.StatusNotifier(api_endpoint, **notifier_options)
        logs = sn.query_and_notify(query=query, subject=email_subject)

        if not options.quiet:
            # dump to output
            sys.stdout.write(json.dumps(logs))
            sys.stdout.write('\n')

    except Exception as e:
        scripting_utils.exit_with_msg(e)

if __name__ == "__main__":
    main()

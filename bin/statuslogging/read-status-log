#!/usr/bin/env python

"""read-status-log: Script to ....

Note: This script doesn't buy you much more than you can do with curl.  It's
mostly for testing the underlying statuslogging.StatusReader class

Example calls:
 > ./bin/statuslogging/read-status-log \
    -e http://status-log-production.herokuapp.com/status-logs
 > ./bin/statuslogging/read-status-log -l 10 -o 20 -q status=Good \
    -e http://status-log-production.herokuapp.com/status-logs
"""

__author__      = "Joel Dubowy"
__copyright__   = "Copyright (c) 2015 AirFire, PNW, USFS"

import re
import sys
from optparse import OptionParser

try:
    from pyairfire import statuslogging, scripting
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../../'))
    sys.path.insert(0, root_dir)
    from pyairfire import statuslogging, scripting

REQUIRED_OPTIONS = [
    {
        'short': '-e',
        'long': '--api-endpoint',
        'desc': 'api endpoint',
        'dest': 'api_endpoint',
        'help': 'status logger query API endpoint (required)'
    }
]

def parse_options():
    #usage = "usage: %prog [options]"
    parser = OptionParser() #usage=usage)

    # Required options
    for ro in REQUIRED_OPTIONS:
        parser.add_option(ro['short'], ro['long'], dest=ro['dest'], help=ro['help'])

    # Optional
    parser.add_option("-q", "--query", type="string", dest="query",
        action="callback", help="extra query parameters", default={},
        callback=scripting.options.extract_and_set_key_value)
    parser.add_option("-l", "--limit", type="int", dest="limit",
        help="maximum number of status logs to be returned by API")
    parser.add_option("-o", "--offset", type="int", dest="offset",
        help="offset used in conjunction with limit")
    parser.add_option("-n", "--newer-than", type="string", dest="newer_than",
        action="callback", help="Only return entries newer than this datetime",
        default=None, callback=scripting.options.parse_datetime)
    parser.add_option("-p", "--older-than", type="string", dest="older_than",
        action="callback", help="Only return entries older than this datetime",
        default=None, callback=scripting.options.parse_datetime)
    parser.add_option("-r", "--most-recent-by-group", dest="most_recent_by_group",
        help="group by this entry data field (ex. 'domain'")
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
        help="to turn on extra output", default=False)

    options, args = parser.parse_args()

    scripting.options.check_required_options(options, REQUIRED_OPTIONS,
        lambda: parser.print_help())

    if options.verbose:
        for ro in REQUIRED_OPTIONS:
            print "%s (%s'%s'): %s" % (ro['desc'],
                "'%s', "  % (ro['short']) if ro['short'] else '', ro['long'],
                options.__dict__[ro['dest']])
        if options.query:
            print "Query parameters ('-q', '--query'):"
            for k,v  in options.query.items():
                print "  %s: %s" % (k, v)
        print "Query limit: %s" % (options.limit)
        print "Query offset: %s" % (options.offset)
        print "Newer than: %s" % (options.older_than)
        print "Older than : %s" % (options.newer_than)
        print "Most recent by group : %s" % (options.most_recent_by_group)

    return options

def main():
    options = parse_options()

    try:
        sr = statuslogging.StatusReader(options.api_endpoint)
        logs = sr.read(limit=options.limit, offset=options.offset,
            newer_than=options.newer_than, older_than=options.older_than,
            most_recent_by_group=options.most_recent_by_group,
            **dict(options.query))
        print logs
    except Exception, e:
        scripting.utils.exit_with_msg(e.message)

if __name__ == "__main__":
    main()
